Skip to content
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 
@wanzi11 
Learn Git and GitHub without any code!
Using the Hello World guide, you’ll start a branch, write comments, and open a pull request.


wanzi11
/
config
1
00
 Code
 Issues 0
 Pull requests 0 Actions
 Projects 0
 Wiki
 Security 0
 Insights
 Settings
config/application-service.yml
 ry ---
e4ca77b 26 days ago
132 lines (124 sloc)  5.5 KB
  
server:
  port: 8090


#生产的环境
---
server:
  port: 8881
  
spring:
  profiles: dev
  application:
    name: jf-exp-service
  datasource:
    url: jdbc:mysql://47.107.228.216:3306/jf_system?characterEncoding=UTF-8&useSSL=false
    username: root
    password: root
    hikari: # springboot 默认支持的连接池，由日本人开发，号称目前市场上最快的连接池
      maximum-pool-size: 20
      minimum-idle: 10
  redis:
  host: 127.0.0.1
  rabbitmq:
     # virtual-host: /jf-express # virtual-host，相当于mysql的一个数据库
      username: beespal
      password: beespal
      host: 192.168.0.3
      template:
        retry:
          enabled: true
          initial-interval: 10000ms # 重试间隔时间初始值
          multiplier: 2 # 两次重试间隔时间相差的倍数，即如果第一次重试是10s后，则第二次重试应该是本次重试结束之后(10*multiplier)s之后
          max-interval: 210000ms # 重试间隔时间最大值，即如果两次重试之间相差的时间大于这个值，就放弃重试
      publisher-confirms: true
      port: 5672 # 消息失败有大概三个阶段，即发布者向rabbitmq发布时可能失败，rabbitmq服务本身，比如宕机导致失败，消息消费方消费失败
                              #这里解决第一种情况，发布者发布消息后，会从rabbitmq接收一个回执，确认发布成功
                                     #第二种情况，可采用消息配置持久化解决，第三种情况，消费者拿到消息，应该发送一个回执向消息队列，这点spring已经默认解决了

eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:10010/eureka
    registry-fetch-interval-seconds: 5
  instance:
    instance-id: ${spring.application.name}:${server.port}
    prefer-ip-address: true  #当你获取host时，返回的不是主机名，而是ip
    ip-address: 127.0.0.1
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 15
ribbon:
  ConnectTimeout: 4000 # 连接超时时间(ms)0
  ReadTimeout: 2000 # 通信超时时间(ms)
  OkToRetryOnAllOperations: true # 是否对所有操作重试
  MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数
  MaxAutoRetries: 1 # 同一实例的重试次数
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMillisecond: 10000 # 熔断超时时长：10000ms
mybatis:
  config-location: classpath:mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径
  type-aliases-package: com.beespal.service.pojo    # 所有Entity别名类所在包
  mapper-locations:
  - classpath:mybatis/mappers/**/*.xml                       # mapper映射文件  
---
#测试的环境
server:
  port: 8882
spring:
  profiles: test
    application:
      name: jf-exp-service
    datasource:
      url: jdbc:mysql://47.107.228.216:3306/jf_system?characterEncoding=UTF-8&useSSL=false
      username: root
      password: root
      hikari: # springboot 默认支持的连接池，由日本人开发，号称目前市场上最快的连接池
        maximum-pool-size: 20
        minimum-idle: 10
    redis:
    host: 127.0.0.1
    rabbitmq:
       # virtual-host: /jf-express # virtual-host，相当于mysql的一个数据库
        username: beespal
        password: beespal
        host: 192.168.0.3
        template:
          retry:
            enabled: true
            initial-interval: 10000ms # 重试间隔时间初始值
            multiplier: 2 # 两次重试间隔时间相差的倍数，即如果第一次重试是10s后，则第二次重试应该是本次重试结束之后(10*multiplier)s之后
            max-interval: 210000ms # 重试间隔时间最大值，即如果两次重试之间相差的时间大于这个值，就放弃重试
        publisher-confirms: true
        port: 5672 # 消息失败有大概三个阶段，即发布者向rabbitmq发布时可能失败，rabbitmq服务本身，比如宕机导致失败，消息消费方消费失败
                                #这里解决第一种情况，发布者发布消息后，会从rabbitmq接收一个回执，确认发布成功
                                       #第二种情况，可采用消息配置持久化解决，第三种情况，消费者拿到消息，应该发送一个回执向消息队列，这点spring已经默认解决了
  
eureka:
    client:
      service-url:
        defaultZone: http://127.0.0.1:10010/eureka
      registry-fetch-interval-seconds: 5
    instance:
      instance-id: ${spring.application.name}:${server.port}
      prefer-ip-address: true  #当你获取host时，返回的不是主机名，而是ip
      ip-address: 127.0.0.1
      lease-renewal-interval-in-seconds: 5
      lease-expiration-duration-in-seconds: 15
ribbon:
    ConnectTimeout: 4000 # 连接超时时间(ms)0
    ReadTimeout: 2000 # 通信超时时间(ms)
    OkToRetryOnAllOperations: true # 是否对所有操作重试
    MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数
    MaxAutoRetries: 1 # 同一实例的重试次数
hystrix:
    command:
      default:
        execution:
          isolation:
            thread:
              timeoutInMillisecond: 10000 # 熔断超时时长：10000ms
mybatis:
    config-location: classpath:mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径
    type-aliases-package: com.beespal.service.pojo    # 所有Entity别名类所在包
    mapper-locations:
    - classpath:mybatis/mappers/**/*.xml                       # mapper映射文件  
    


© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
